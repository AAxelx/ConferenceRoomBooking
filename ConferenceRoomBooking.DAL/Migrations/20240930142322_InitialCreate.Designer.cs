// <auto-generated />
using System;
using ConferenceRoomBooking.DAL.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConferenceRoomBooking.DAL.Migrations
{
    [DbContext(typeof(ConferenceRoomBookingDbContext))]
    [Migration("20240930142322_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingEntityServiceEntity", b =>
                {
                    b.Property<Guid>("BookingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SelectedServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingsId", "SelectedServicesId");

                    b.HasIndex("SelectedServicesId");

                    b.ToTable("BookingEntityServiceEntity");
                });

            modelBuilder.Entity("ConferenceRoomBooking.DAL.Entities.BookingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("ConferenceRoomBooking.DAL.Entities.RoomEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98e4f21a-27b6-4455-9656-a65e3f75f088"),
                            BasePricePerHour = 2000.00m,
                            Capacity = 50,
                            Name = "Room A"
                        },
                        new
                        {
                            Id = new Guid("66a0e01f-8104-4abb-ae4c-0bdb0a5b98d8"),
                            BasePricePerHour = 3500.00m,
                            Capacity = 100,
                            Name = "Room B"
                        },
                        new
                        {
                            Id = new Guid("389f9c4c-e38e-4fac-b08c-4917c9e63ad9"),
                            BasePricePerHour = 1500.00m,
                            Capacity = 30,
                            Name = "Room C"
                        });
                });

            modelBuilder.Entity("ConferenceRoomBooking.DAL.Entities.ServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("611ae640-d819-4ac0-a078-f3aaa44078cb"),
                            Name = "Projector",
                            Price = 500.00m
                        },
                        new
                        {
                            Id = new Guid("3c0a8b01-1bd4-481d-8bfc-6fbf2d6d0196"),
                            Name = "Wi-Fi",
                            Price = 300.00m
                        },
                        new
                        {
                            Id = new Guid("99109678-abc5-4687-9042-f67503711b25"),
                            Name = "Sound System",
                            Price = 700.00m
                        });
                });

            modelBuilder.Entity("ConferenceRoomBooking.DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoomEntityServiceEntity", b =>
                {
                    b.Property<Guid>("AvaliableServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AvaliableServicesId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("RoomEntityServiceEntity");
                });

            modelBuilder.Entity("BookingEntityServiceEntity", b =>
                {
                    b.HasOne("ConferenceRoomBooking.DAL.Entities.BookingEntity", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConferenceRoomBooking.DAL.Entities.ServiceEntity", null)
                        .WithMany()
                        .HasForeignKey("SelectedServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConferenceRoomBooking.DAL.Entities.BookingEntity", b =>
                {
                    b.HasOne("ConferenceRoomBooking.DAL.Entities.RoomEntity", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConferenceRoomBooking.DAL.Entities.UserEntity", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoomEntityServiceEntity", b =>
                {
                    b.HasOne("ConferenceRoomBooking.DAL.Entities.ServiceEntity", null)
                        .WithMany()
                        .HasForeignKey("AvaliableServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConferenceRoomBooking.DAL.Entities.RoomEntity", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConferenceRoomBooking.DAL.Entities.RoomEntity", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("ConferenceRoomBooking.DAL.Entities.UserEntity", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
